
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: blueprints.app.m4d.ibm.com
spec:
  group: app.m4d.ibm.com
  names:
    kind: Blueprint
    listKind: BlueprintList
    plural: blueprints
    singular: blueprint
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.observedState.ready
      name: Ready
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Blueprint is the Schema for the blueprints API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'BlueprintSpec defines the desired state of Blueprint, which is the runtime environment which provides the Data Scientist''s application with secure and governed access to the data requested in the M4DApplication. The blueprint uses an "argo like" syntax which indicates the components and the flow of data between them as steps TODO: Add an indication of the communication relationships between the components'
            properties:
              entrypoint:
                type: string
              flow:
                description: DataFlow indicates the flow of the data between the components Currently we assume this is linear and thus use steps, but other more complex graphs could be defined as per how it is done in argo workflow
                properties:
                  name:
                    type: string
                  steps:
                    items:
                      description: FlowStep is one step indicates an instance of a module in the blueprint, It includes the name of the module template (spec) and the parameters received by the component instance that is initiated by the orchestrator.
                      properties:
                        arguments:
                          description: Arguments are the input parameters for a specific instance of a module.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        name:
                          description: Name is the name of the instance of the module. For example, if the application is named "notebook" and an implicitcopy module is deemed necessary.  The FlowStep name would be notebook-implicitcopy.
                          type: string
                        template:
                          description: 'Template is the name of the specification in the Blueprint describing how to instantiate a component indicated by the module.  It is the name of a M4DModule CRD. For example: implicit-copy-db2wh-to-s3-latest'
                          type: string
                      required:
                      - name
                      - template
                      type: object
                    type: array
                required:
                - name
                - steps
                type: object
              templates:
                items:
                  description: ComponentTemplate is a copy of a M4DModule Custom Resource.  It contains the information necessary to instantiate a component in a FlowStep, which provides the functionality described by the module.  There are 3 different module types.
                  properties:
                    chart:
                      description: Chart contains the location of the helm chart with info detailing how to deploy
                      properties:
                        name:
                          description: Name of helm chart
                          type: string
                        values:
                          additionalProperties:
                            type: string
                          description: Values to pass to helm chart insallation
                          type: object
                      required:
                      - name
                      type: object
                    kind:
                      description: Kind of k8s resource
                      type: string
                    name:
                      description: Name of the template
                      type: string
                  required:
                  - chart
                  - kind
                  - name
                  type: object
                type: array
            required:
            - entrypoint
            - flow
            - templates
            type: object
          status:
            description: BlueprintStatus defines the observed state of Blueprint This includes readiness, error message, and indicators forthe Kubernetes resources owned by the Blueprint for cleanup and status monitoring
            properties:
              observedGeneration:
                description: ObservedGeneration is taken from the Blueprint metadata.  This is used to determine during reconcile whether reconcile was called because the desired state changed, or whether status of the allocated resources should be checked.
                format: int64
                type: integer
              observedState:
                description: ObservedState includes information to be reported back to the M4DApplication resource It includes readiness and error indications, as well as user instructions
                properties:
                  dataAccessInstructions:
                    description: DataAccessInstructions indicate how the data user or his application may access the data. Instructions are available upon successful orchestration.
                    type: string
                  error:
                    description: Error indicates that there has been an error to orchestrate the modules and provides the error message
                    type: string
                  ready:
                    description: Ready represents that the modules have been orchestrated successfully and the data is ready for usage
                    type: boolean
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
